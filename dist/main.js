/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
eval("// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 30, bottom: 30, left: 60},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n// setup fill color\nvar typeColor = d3.scaleOrdinal().domain(['grass','water','fire'])\n  .range(['green','blue','red'])\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#scatterplot\")\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// Add X axis\nvar x = d3.scaleLinear()\n  .domain([-1, 5])\n  .range([0, width]);\nsvg.append(\"g\")\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\n  .call(d3.axisBottom(x));\n\n// Add Y axis\nvar y = d3.scaleLinear()\n  .domain([-1, 5])\n  .range([height, 0]);\nsvg.append(\"g\")\n  .call(d3.axisLeft(y));\n\n// add the tooltip area to the webpage\nvar tooltip = d3.select(\"#scatterplot\").append(\"div\")\n    .attr(\"class\", \"tooltip\")\n    .style(\"opacity\", 0);\n\n// add jitter to see points better\nvar jitterWidth = 40\n\n//Read the data\nd3.csv(\"../data/pokemon_small.csv\", function(data) {\n  // Add dots\n  svg.append('g')\n    .selectAll(\"dot\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n      .attr(\"cx\", function (d) {return x(d.against_water) + Math.random()*jitterWidth;})\n      .attr(\"cy\", function (d) {return y(d.against_grass) + Math.random()*jitterWidth;})\n      .attr(\"r\", 4)\n      .style(\"fill\", function (d) {return typeColor(d.type1);})\n      .style(\"opacity\",0.5)\n  \t.on(\"mouseover\", function(d) {\n          tooltip.transition()\n               .duration(200)\n               .style(\"opacity\", .9);\n          tooltip.html(d.name)\n               .style(\"left\", (d3.event.pageX + 10) + \"px\")\n               .style(\"top\", (d3.event.pageY) + \"px\");\n      })\n      .on(\"mouseout\", function(d) {\n          tooltip.transition()\n               .duration(500)\n               .style(\"opacity\", 0);\n      });\n\n})\n\n//# sourceURL=webpack://pca-interactive-visualization/./src/index.js?");
/******/ })()
;